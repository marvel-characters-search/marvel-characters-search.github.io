{"version":3,"sources":["urlSigner.js","model/CharactersModel.js","components/CharacterCard/CharacterCard.js","containers/CharactersContainer/CharactersContainer.js","components/Search/Search.js","components/ActivityOfTheCharacter/ActivityOfTHeCharacter.js","containers/CharacterDetailContainer/CharacterDetailContainer.js","App.js","serviceWorker.js","index.js"],"names":["signUrl","url","ts","Date","getTime","websiteURL","URL","window","location","parser","URLSearchParams","search","privateKey","publicKey","hash","md5","separator","indexOf","singedUrlDeterministic","get","CharactersModel","getPaginatedCharacters","fetch","then","res","json","getCharactersByNameStart","nameStart","getSelectedCharacter","characterName","nameForUrl","split","join","CharacterCard","props","Meta","Card","imgPath","character","thumbnail","path","imgExtension","extension","name","hoverable","cover","alt","src","title","CharactersContainer","characters","map","onClick","renderSelectedCharacter","xs","sm","md","lg","xl","key","id","style","padding","overflow","gutter","type","Search","state","options","notFoundContent","handleSelect","handleMultipleOptions","setMultipleOptions","handleSearch","searchText","data","results","characterOption","value","setState","catch","err","console","log","getPotentialCharacter","length","handleAllPaginatedCharacters","handleEnterPress","e","target","handleInputSearch","inputText","this","renderPaginatedCharacters","dropdownClassName","dropdownMatchSelectWidth","onSelect","onSearch","debounce","width","size","placeholder","onPressEnter","React","Component","ActivityOfTheCharacter","activitiesList","activity","i","CharacterDetailContainer","className","onBack","subTitle","description","comics","items","events","series","stories","App","selectedCharacter","displayedContainer","Header","Layout","Content","Title","Typography","color","span","align","justify","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a665798e.chunk.js","sourcesContent":["import md5 from 'md5';\n\nexport function singedUrlDeterministic(url, ts, privateKey, publicKey) {\n  let hash = md5(ts + privateKey + publicKey);\n  let separator = '&'\n  if (url.indexOf('?') === -1) {\n    separator = '?'\n  }\n  let signedUrl = `${url}${separator}ts=${ts}&apikey=${publicKey}&hash=${hash}`;\n\n  return signedUrl;\n};\n\n// Function return a hash that will be used as a part of url when making an api call\nexport function signUrl(url) {\n  let ts = new Date().getTime();\n  let websiteURL = new URL(window.location);\n  let parser = new URLSearchParams(websiteURL.search);\n  let privateKey = parser.get('privateKey');\n  let publicKey = parser.get('publicKey');\n  return singedUrlDeterministic(url, ts, privateKey, publicKey);\n};","import { signUrl } from '../urlSigner';\n\nclass CharactersModel {\n  // Getting first 18 characters to render on the page\n  static getPaginatedCharacters = () => {\n    let url = signUrl(`http://gateway.marvel.com/v1/public/characters?limit=18`);\n    return fetch(url)\n      .then(res => res.json())\n  };\n\n  static getCharactersByNameStart = (nameStart) => {\n    if (nameStart) {\n      let url = signUrl(`http://gateway.marvel.com/v1/public/characters?nameStartsWith=${nameStart}`);\n      return fetch(url)\n        .then(res => res.json())\n    }\n  };\n\n  static getSelectedCharacter = (characterName) => {\n    if (characterName) {\n      let nameForUrl = characterName.split(\" \").join(\"%20\");\n      let url = signUrl(`http://gateway.marvel.com/v1/public/characters?name=${nameForUrl}`);\n      return fetch(url)\n        .then(res => res.json())\n    }\n  };\n};\n\nexport default CharactersModel;","import React from 'react';\nimport { Card } from 'antd';\n\nfunction CharacterCard(props) {\n  const { Meta } = Card;\n  let imgPath = props.character ? props.character.thumbnail.path : '';\n  let imgExtension = props.character ? props.character.thumbnail.extension : '';\n  let name = props.character ? props.character.name : '';\n\n  return (\n    <Card\n      hoverable\n      cover={<img alt={name}\n      src={`${imgPath}/portrait_medium.${imgExtension}`} />}\n    >\n      <Meta title={name} />\n    </Card>\n  )\n};\n\nexport default CharacterCard;","import React from 'react';\nimport CharacterCard from '../../components/CharacterCard/CharacterCard';\nimport { Row, Col } from 'antd';\n\n// Component displays multiple cards on the page\nfunction CharactersContainer(props) {\n  let style = { overflow: 'hidden' };\n  let characters = (props.characters || []).map((character) => {\n    return (\n      <Col\n        onClick={() => props.renderSelectedCharacter(character.name)}\n        xs={24} sm={12} md={8} lg={6} xl={4}\n        key={character.id}\n        style={{ padding: '8px 5px' }}\n        >\n          <CharacterCard key={character.id} character={character} />\n      </Col>\n  )});\n    \n  return (\n    <div style={style}> {/* https://github.com/ant-design/ant-design/issues/10144 */}\n        <Row gutter={16} type='flex'>\n          { characters }\n        </Row>\n    </div>\n  )\n};\n\nexport default CharactersContainer;\n","import React from 'react';\nimport { AutoComplete, Input } from 'antd';\nimport debounce from 'lodash/debounce';\nimport CharactersModel from '../../model/CharactersModel';\nimport './Search.css';\n\nclass Search extends React.Component {\n  state = {\n    options: [],\n    notFoundContent: '',\n  };\n\n  // Passing information about selected character to a parent element\n  handleSelect = (characterName) => {\n    this.props.renderSelectedCharacter(characterName);\n  };\n\n  // If we've got multiple options from database, \n  // passes these options to a parent element to render on the page \n  handleMultipleOptions = (characters) => {\n    this.props.setMultipleOptions(characters);\n  };\n\n  // On empty search, passes information to render a list of paginated characters\n  handleAllPaginatedCharacters() {\n    this.props.renderPaginatedCharacters()\n  };\n\n  //Sets options for autocomplete\n  handleSearch = searchText => {\n    if (searchText !== '') {\n      // Making api call and sets autocomplete only when search input is not empty\n      CharactersModel.getCharactersByNameStart(searchText)\n        .then(res => {\n          let options = res.data.results.map(characterOption => {\n            return { value: characterOption.name }\n          });\n          this.setState({\n            options: options\n          })\n        })\n        .catch(err => console.log(err))\n    } else {\n      // If search input is empty, reset options from previous search\n      this.setState({\n        notFoundContent: '',\n        options: [],\n      });\n    };\n  };\n\n  // Every 300ms getting results from database about desired character\n  getPotentialCharacter = (characterName) => {\n    if (characterName) {\n      CharactersModel.getCharactersByNameStart(characterName)\n        .then(res => {\n          if (res.data.results.length === 1) {\n            // if there is only one result - selects this character\n            this.handleSelect(res.data.results[0].name)\n          } else if (res.data.results.length > 1) {\n            // if there are many options with the same name - renders options on the page\n            this.handleMultipleOptions(res.data.results);\n          } else {\n            this.setState({\n              notFoundContent: 'Ouch..Looks like I don\\'t have it...'\n            })\n          }\n        })\n    } else {\n      // if character's name wasn't provided - displays paginated characters\n      this.handleAllPaginatedCharacters();\n    }\n  };\n\n  handleEnterPress = (e) => {\n    this.getPotentialCharacter(e.target.value);\n  };\n\n  handleInputSearch = (inputText) => {\n    this.getPotentialCharacter(inputText);\n  };\n\n  render() {\n    return (\n      <AutoComplete\n        dropdownClassName='certain-category-search-dropdown'\n        dropdownMatchSelectWidth={500}\n        options={this.state.options}\n        onSelect={this.handleSelect}\n        onSearch={debounce(this.handleSearch, 300)}\n        style={{\n          width: '100%',\n          padding: '20px 0'\n        }}\n        notFoundContent={this.state.notFoundContent}\n      >\n        <Input.Search\n          size='large'\n          placeholder='Name of the Character (ex. Spider-Man)'\n          onPressEnter={this.handleEnterPress}\n          onSearch={this.handleInputSearch}\n        />\n      </AutoComplete>\n    );\n  }\n}\n\nexport default Search;","import React from 'react';\nimport { Col } from 'antd';\n\n// Component displays title (comics/events/series/stories) and its content\nfunction ActivityOfTheCharacter(props) {\n  let title = props.title ? props.title : '';\n  let activitiesList = props.activity.map((activity, i) => {\n    return <li key={i}>{activity.name}</li>\n  });\n\n  return (\n    <Col xs={24} sm={12} md={8} lg={6} xl={6}\n      gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}\n    >\n      <h2>{title}</h2>\n      <ul>\n        {activitiesList}\n      </ul>\n    </Col>\n  )\n};\n\nexport default ActivityOfTheCharacter;","import React from 'react';\nimport CharacterCard from '../../components/CharacterCard/CharacterCard';\nimport { Col, Row, PageHeader } from 'antd';\nimport './CharactersDetailContainer.css';\nimport ActivityOfTheCharacter from '../../components/ActivityOfTheCharacter/ActivityOfTHeCharacter';\n\nfunction CharacterDetailContainer(props) {\n  let style = { padding: '10px' };\n  if (props.character) {\n    let character = props.character;\n\n    return (\n      <>\n        <PageHeader\n          className='site-page-header'\n          onBack={props.renderPaginatedCharacters}\n          subTitle='Main page'\n        />\n        <Row gutter={16}>\n          {/* Row for image and description */}\n          <Col xs={24} sm={8} md={6} lg={4} xl={4}\n            style={style}\n          >\n            <CharacterCard key={character.id} character={character}/>\n          </Col>\n          <Col xs={24} sm={8} md={8} lg={12} xl={12}\n            style={style}\n          >\n            <p>{character.description || 'No description for this character :('}</p>\n          </Col>\n        </Row>\n\n        <Row type='flex' style={style}>\n          {/* Row with info about comics/series/events/strories with this character */}\n          <ActivityOfTheCharacter title={'Comics'} activity={character.comics.items} />\n          <ActivityOfTheCharacter title={'Events'} activity={character.events.items} />\n          <ActivityOfTheCharacter title={'Series'} activity={character.series.items} />\n          <ActivityOfTheCharacter title={'Stories'} activity={character.stories.items} />\n        </Row>\n      </>\n    )\n  } else {\n    // If character was not passed to the page\n    return <Row />\n  }\n};\n\nexport default CharacterDetailContainer;","import React from 'react';\nimport CharactersModel from './model/CharactersModel';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { Layout, Row, Col, Typography } from 'antd';\nimport CharactersContainer from './containers/CharactersContainer/CharactersContainer';\nimport Search from './components/Search/Search';\nimport CharacterDetailContainer from './containers/CharacterDetailContainer/CharacterDetailContainer';\n\nclass App extends React.Component {\n  state = {\n    selectedCharacter: '',\n    characters: [],\n    options: [],\n  };\n\n  componentDidMount() {\n    this.renderPaginatedCharacters()\n  };\n\n  // If needed to render multiple characters, sets these character to state and trigers render\n  setMultipleOptions = (characters) => {\n    this.setState({\n      selectedCharacter: '',\n      characters: characters\n    })\n  };\n\n  // Sets a selected character to state and trigers render for displaying character's details \n  renderSelectedCharacter = (characterName) => {\n    CharactersModel.getSelectedCharacter(characterName)\n      .then(res => {\n        this.setState({\n          selectedCharacter: res.data.results[0]\n        })\n      })\n  };\n\n  // Gets first N (currently: limit=18)characters from database and passes to a function to triger render\n  renderPaginatedCharacters = () => {\n    CharactersModel.getPaginatedCharacters()\n      .then(res => {\n        this.setMultipleOptions(res.data.results)\n      })\n      .catch(err => console.log(err))\n  };\n\n  render() {\n    const { Header, Content } = Layout;\n    const { Title } = Typography;\n    let displayedContainer;\n\n    if (this.state.selectedCharacter !== '') {\n      displayedContainer =\n        <CharacterDetailContainer\n          renderPaginatedCharacters={this.renderPaginatedCharacters}\n          character={this.state.selectedCharacter}\n        />\n    } else {\n      displayedContainer =\n        <CharactersContainer\n          characters={this.state.characters}\n          renderSelectedCharacter={this.renderSelectedCharacter}\n        />\n    }\n\n    return (\n      <Layout className='layout'>\n        <Header>\n          <div className='logo'>\n            <h1 style={{ color: 'white' }}>Marvel Characters</h1>\n          </div>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Row span={24} align='center' style={{ padding: '20px 0' }}>\n            <Title>Find your favorite Marvel Character</Title>\n          </Row>\n          <Row justify='center'>\n            <Col span={24}>\n              <Search\n                renderSelectedCharacter={this.renderSelectedCharacter}\n                setMultipleOptions={this.setMultipleOptions}\n                renderPaginatedCharacters={this.renderPaginatedCharacters}\n              />\n            </Col>\n            <Col span={24}>\n              {displayedContainer}\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}