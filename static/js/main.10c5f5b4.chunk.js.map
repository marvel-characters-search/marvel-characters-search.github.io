{"version":3,"sources":["urlSigner.js","model/CharactersModel.js","components/CharacterPreviewCard/CharacterPreviewCard.js","containers/CharactersContainer/CharactersContainer.js","components/Search/Search.js","components/CharacterDetail/CharacterDetail.js","containers/CharacterDetailContainer/CharacterDetailContainer.js","App.js","index.js"],"names":["signUrl","url","ts","Date","getTime","websiteURL","URL","window","location","parser","URLSearchParams","search","privateKey","publicKey","hash","md5","separator","indexOf","singedUrlDeterministic","get","CharactersModel","getInitalCharacterSet","fetch","then","res","json","getCharactersByNamePrefix","namePrefix","getCharacterByName","characterName","nameForUrl","split","join","CharacterPreviewCard","props","Meta","Card","imgPath","character","thumbnail","path","imgExtension","extension","name","hoverable","cover","alt","src","title","CharacterGridContainer","characters","map","onClick","showSingleCharacter","xs","sm","md","lg","xl","key","id","style","padding","overflow","gutter","type","Search","state","options","notFoundContent","handleSelect","showSearchResults","showCharacterSelection","handleSearch","searchText","data","results","characterOption","value","setState","catch","err","console","log","searchCharacterByPrefix","length","handleEmptySearchResult","handleEnter","e","target","this","renderInitialCharacterSelection","dropdownClassName","onSelect","onSearch","debounce","width","size","placeholder","onPressEnter","React","Component","CharacterDetail","activitiesList","activity","i","CharacterDetailContainer","className","onBack","subTitle","description","comics","items","events","series","stories","App","selectedCharacter","displayedContainer","Header","Layout","Content","Title","Typography","CharactersContainer","color","span","align","justify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10c5f5b4.chunk.js","sourcesContent":["import md5 from 'md5';\n\nexport function singedUrlDeterministic(url, ts, privateKey, publicKey) {\n  let hash = md5(ts + privateKey + publicKey);\n  let separator = '&'\n  if (url.indexOf('?') === -1) {\n    separator = '?'\n  }\n  let signedUrl = `${url}${separator}ts=${ts}&apikey=${publicKey}&hash=${hash}`;\n\n  return signedUrl;\n};\n\n// Function return a hash that will be used as a part of url when making an api call\nexport function signUrl(url) {\n  let ts = new Date().getTime();\n  let websiteURL = new URL(window.location);\n  let parser = new URLSearchParams(websiteURL.search);\n  let privateKey = parser.get('privateKey');\n  let publicKey = parser.get('publicKey');\n  return singedUrlDeterministic(url, ts, privateKey, publicKey);\n};","import { signUrl } from '../urlSigner';\n\nclass CharactersModel {\n  static getInitalCharacterSet = () => {\n    let url = signUrl(`https://gateway.marvel.com/v1/public/characters?limit=18`);\n    return fetch(url)\n      .then(res => res.json())\n  };\n\n  static getCharactersByNamePrefix = (namePrefix) => {\n    if (namePrefix) {\n      let url = signUrl(`https://gateway.marvel.com/v1/public/characters?nameStartsWith=${namePrefix}`);\n      return fetch(url)\n        .then(res => res.json())\n    }\n  };\n\n  static getCharacterByName = (characterName) => {\n    if (characterName) {\n      let nameForUrl = characterName.split(\" \").join(\"%20\");\n      let url = signUrl(`https://gateway.marvel.com/v1/public/characters?name=${nameForUrl}`);\n      return fetch(url)\n        .then(res => res.json())\n    }\n  };\n};\n\nexport default CharactersModel;","import React from 'react';\nimport { Card } from 'antd';\n\nfunction CharacterPreviewCard(props) {\n  const { Meta } = Card;\n  let imgPath = props.character ? props.character.thumbnail.path : '';\n  let imgExtension = props.character ? props.character.thumbnail.extension : '';\n  let name = props.character ? props.character.name : '';\n\n  return (\n    <Card\n      hoverable\n      cover={<img alt={name}\n        src={`${imgPath}/portrait_medium.${imgExtension}`} />}\n    >\n      <Meta title={name} />\n    </Card>\n  )\n};\n\nexport default CharacterPreviewCard;","import React from 'react';\nimport CharacterPreviewCard from '../../components/CharacterPreviewCard/CharacterPreviewCard';\nimport { Row, Col } from 'antd';\n\n// Component displays multiple cards on the page\nfunction CharacterGridContainer(props) {\n  let style = { overflow: 'hidden' };\n  let characters = (props.characters || []).map((character) => {\n    return (\n      <Col\n        onClick={() => props.showSingleCharacter(character.name)}\n        xs={24} sm={12} md={8} lg={6} xl={4}\n        key={character.id}\n        style={{ padding: '8px 5px' }}\n      >\n        <CharacterPreviewCard key={character.id} character={character} />\n      </Col>\n    )\n  });\n\n  return (\n    <div style={style}> {/* https://github.com/ant-design/ant-design/issues/10144 */}\n      <Row gutter={16} type='flex'>\n        {characters}\n      </Row>\n    </div>\n  )\n};\n\nexport default CharacterGridContainer;\n","import React from 'react';\nimport { AutoComplete, Input } from 'antd';\nimport debounce from 'lodash/debounce';\nimport CharactersModel from '../../model/CharactersModel';\nimport './Search.css';\n\nclass Search extends React.Component {\n  state = {\n    options: [],\n    notFoundContent: '',\n  };\n\n  // Passing information about selected character to a parent element\n  handleSelect = (characterName) => {\n    this.props.showSingleCharacter(characterName);\n  };\n\n  // If we've got multiple options from database, \n  // passes these options to a parent element to render on the page \n  showSearchResults = (characters) => {\n    this.props.showCharacterSelection(characters);\n  };\n\n  // On empty search, passes information to render a list of paginated characters\n  handleEmptySearchResult() {\n    this.props.renderInitialCharacterSelection()\n  };\n\n  handleSearch = searchText => {\n    if (searchText !== '') {\n      // Making api call and sets autocomplete only when search input is not empty\n      CharactersModel.getCharactersByNamePrefix(searchText)\n        .then(res => {\n          let options = res.data.results.map(characterOption => {\n            return { value: characterOption.name }\n          });\n          this.setState({\n            options: options\n          })\n        })\n        .catch(err => console.log(err))\n    } else {\n      // If search input is empty, reset options from previous search\n      this.setState({\n        notFoundContent: '',\n        options: [],\n      });\n    };\n  };\n\n  searchCharacterByPrefix = (namePrefix) => {\n    if (namePrefix) {\n      CharactersModel.getCharactersByNamePrefix(namePrefix)\n        .then(res => {\n          if (res.data.results.length === 1) {\n            // if there is only one result - selects this character\n            this.handleSelect(res.data.results[0].name)\n          } else if (res.data.results.length > 1) {\n            // if there are many options with the same name - renders options on the page\n            this.showSearchResults(res.data.results);\n          } else {\n            this.setState({\n              notFoundContent: 'Ouch..Looks like I don\\'t have it...'\n            })\n          }\n        })\n    } else {\n      this.handleEmptySearchResult();\n    }\n  };\n\n  handleEnter = (e) => {\n    this.searchCharacterByPrefix(e.target.value);\n  };\n\n  render() {\n    return (\n      <AutoComplete\n        dropdownClassName='certain-category-search-dropdown'\n        options={this.state.options}\n        onSelect={this.handleSelect}\n        onSearch={debounce(this.handleSearch, 300)}\n        style={{\n          width: '100%',\n          padding: '20px 0'\n        }}\n        notFoundContent={this.state.notFoundContent}\n      >\n        <Input.Search\n          size='large'\n          placeholder='Name of the Character (ex. Spider-Man)'\n          onPressEnter={this.handleEnter}\n          onSearch={this.searchCharacterByPrefix}\n        />\n      </AutoComplete>\n    );\n  }\n}\n\nexport default Search;","import React from 'react';\nimport { Col } from 'antd';\n\n// Component displays title (comics/events/series/stories) and its content\nfunction CharacterDetail(props) {\n  let title = props.title ? props.title : '';\n  let activitiesList = props.activity.map((activity, i) => {\n    return <li key={i}>{activity.name}</li>\n  });\n\n  return (\n    <Col xs={24} sm={12} md={8} lg={6} xl={6}\n      gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}\n    >\n      <h2>{title}</h2>\n      <ul>\n        {activitiesList}\n      </ul>\n    </Col>\n  )\n};\n\nexport default CharacterDetail;","import React from 'react';\nimport CharacterPreviewCard from '../../components/CharacterPreviewCard/CharacterPreviewCard';\nimport { Col, Row, PageHeader } from 'antd';\nimport './CharactersDetailContainer.css';\nimport CharacterDetail from '../../components/CharacterDetail/CharacterDetail';\n\nfunction CharacterDetailContainer(props) {\n  let style = { padding: '10px' };\n  if (props.character) {\n    let character = props.character;\n\n    return (\n      <>\n        <PageHeader\n          className='site-page-header'\n          onBack={props.renderInitialCharacterSelection}\n          subTitle='Main page'\n        />\n        <Row gutter={16}>\n          {/* Row for image and description */}\n          <Col xs={24} sm={8} md={6} lg={4} xl={4}\n            style={style}\n          >\n            <CharacterPreviewCard key={character.id} character={character} />\n          </Col>\n          <Col xs={24} sm={8} md={8} lg={12} xl={12}\n            style={style}\n          >\n            <p>{character.description || 'No description for this character :('}</p>\n          </Col>\n        </Row>\n\n        <Row type='flex' style={style}>\n          {/* Row with info about comics/series/events/strories with this character */}\n          <CharacterDetail title={'Comics'} activity={character.comics.items} />\n          <CharacterDetail title={'Events'} activity={character.events.items} />\n          <CharacterDetail title={'Series'} activity={character.series.items} />\n          <CharacterDetail title={'Stories'} activity={character.stories.items} />\n        </Row>\n      </>\n    )\n  } else {\n    // If character was not passed to the page\n    return <Row />\n  }\n};\n\nexport default CharacterDetailContainer;","import React from 'react';\nimport CharactersModel from './model/CharactersModel';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { Layout, Row, Col, Typography } from 'antd';\nimport CharactersContainer from './containers/CharactersContainer/CharactersContainer';\nimport Search from './components/Search/Search';\nimport CharacterDetailContainer from './containers/CharacterDetailContainer/CharacterDetailContainer';\n\nclass App extends React.Component {\n  state = {\n    selectedCharacter: '',\n    characters: [],\n    options: [],\n  };\n\n  componentDidMount() {\n    this.renderInitialCharacterSelection()\n  };\n\n  showCharacterSelection = (characters) => {\n    this.setState({\n      selectedCharacter: '',\n      characters: characters\n    })\n  };\n\n  showSingleCharacter = (characterName) => {\n    CharactersModel.getCharacterByName(characterName)\n      .then(res => {\n        this.setState({\n          selectedCharacter: res.data.results[0]\n        })\n      })\n  };\n\n  // Render first N (currently: 18) characters\n  renderInitialCharacterSelection = () => {\n    CharactersModel.getInitalCharacterSet()\n      .then(res => {\n        this.showCharacterSelection(res.data.results)\n      })\n      .catch(err => console.log(err))\n  };\n\n  render() {\n    const { Header, Content } = Layout;\n    const { Title } = Typography;\n    let displayedContainer;\n\n    if (this.state.selectedCharacter !== '') {\n      displayedContainer =\n        <CharacterDetailContainer\n          renderInitialCharacterSelection={this.renderInitialCharacterSelection}\n          character={this.state.selectedCharacter}\n        />\n    } else {\n      displayedContainer =\n        <CharactersContainer\n          characters={this.state.characters}\n          showSingleCharacter={this.showSingleCharacter}\n        />\n    }\n\n    return (\n      <Layout className='layout'>\n        <Header>\n          <div className='logo'>\n            <h1 style={{ color: 'white' }}>Marvel Characters</h1>\n          </div>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <Row span={24} align='center' style={{ padding: '20px 0' }}>\n            <Title>Find your favorite Marvel Character</Title>\n          </Row>\n          <Row justify='center'>\n            <Col span={24}>\n              <Search\n                showSingleCharacter={this.showSingleCharacter}\n                showCharacterSelection={this.showCharacterSelection}\n                renderInitialCharacterSelection={this.renderInitialCharacterSelection}\n              />\n            </Col>\n            <Col span={24}>\n              {displayedContainer}\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  };\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}